<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="puffer.cafe%22/feed.xml" rel="self" type="application/atom+xml" /><link href="puffer.cafe%22/" rel="alternate" type="text/html" /><updated>2024-03-17T17:29:41+00:00</updated><id>puffer.cafe%22/feed.xml</id><title type="html">Puffer Cafe</title><subtitle>Computer Science, VLSI, Fullstack Development, Operating Systems, and Technology.</subtitle><author><name>Oliver Puffer</name></author><entry><title type="html">Learning Terraform</title><link href="puffer.cafe%22/devlogs/2023/10/12/Learning-Terraform.html" rel="alternate" type="text/html" title="Learning Terraform" /><published>2023-10-12T09:15:24+00:00</published><updated>2023-10-12T09:15:24+00:00</updated><id>puffer.cafe%22/devlogs/2023/10/12/Learning-Terraform</id><content type="html" xml:base="puffer.cafe%22/devlogs/2023/10/12/Learning-Terraform.html"><![CDATA[<h2 id="overview">Overview</h2>

<h1 id="terraform-is-a-proprietary-infrastructure-as-code-iac-tool-developed-by-hashicorp">Terraform is a proprietary Infrastructure as Code (IaC) tool developed by HashiCorp</h1>

<p>Since its inception in 2014, Terraform has been developed and popularized under the Mozilla Public License. As of August 10th 2023, however, future improvements to Terraform ceased to be Open Source <a href="https://github.com/hashicorp/terraform/commit/b145fbcaadf0fa7d0e7040eac641d9aef2a26433">instead falling under the far more restrictive Business Source License</a>. This development has been disheartening to many fans and contributors to the project, but an open source fork of the project exist in the form of the nearly identical <a href="https://opentofu.org/">OpenTofu</a> project.</p>

<p>As things currently stand, this license change primarily impacts companies using Terraform to offer a service that competes with HashiCorp’s own Terraform Cloud, and the actual impact to end users has been marginal.</p>

<p>For the purposes of this page, I will be talking about my experience with HashiCorp’s Terraform.</p>

<h2 id="what-is-infrastructure-as-code-iac">What is Infrastructure as Code (IaC)</h2>

<p>Infrastructure as Code is the practice of managing all cloud infrastructure required for an application through a version-controlled file. This file can then be used alongside a tool such as Terraform, to provision all missing cloud resources automatically. This makes it easy to track changes to provisioned infrastructure, and ensure deployed resources match the expectations of all  developers on a team.</p>

<p>I originally worried that this would be a difficult process. But the underlying concept is quite simple.</p>

<p>For example, Take Deploying a Django App to Heroku, such as Dendrobium.
The steps historically looked something like this:</p>

<ol>
  <li>Download the Heroku CLI</li>
  <li>run <code class="language-plaintext highlighter-rouge">heroku create -a dendrobium</code></li>
  <li>Find out dendrobium is already taken</li>
  <li>eventually try to run <code class="language-plaintext highlighter-rouge">heroku create -a dendro</code></li>
  <li>Try to Remember that the app is named dendro on Heroku</li>
  <li>then run <code class="language-plaintext highlighter-rouge">heroku addons:create heroku-postgresql:mini</code></li>
</ol>

<p>But then, lets say your app takes off, and you need more database space for all the new accounts and user data. That $5/mo mini-postgresql database plan isn’t going to cut it anymore.</p>

<p>And then when you decide that it is finally time to Scale to a CDN, you repeat the same steps again, but this time with AWS/Azure/digitalocean.</p>

<p>Plus again for every microservice… you get the picture.</p>

<p>Instead, Terraform allows us to describe our infrastructure in .tf files.</p>

<h2 id="terraform-ing-dendrobium">Terraform-ing Dendrobium</h2>
<h1 id="to-get-started-i-installed-terraform-with-wsl-and-created-a-maintf-file">To get started, I installed Terraform with WSL, and created a <code class="language-plaintext highlighter-rouge">main.tf</code> file.</h1>

<p>Terraform by itself doesn’t know what cloud providers we use, so we need to define it. We can do this in the required_providers section of the Terraform block, defining the Heroku automation tool set, along with the desired version.</p>

<pre><code class="language-HCL">terraform {
  required_providers {
    heroku = {
      source  = "heroku/heroku" # Heroku's Heroku package
      version = "~&gt; 5.0"  # Version 5.0
    }
  }
}
</code></pre>

<p>That’s it. Terraform now knows how to interface with Heroku. So now we need to define what we want. At this point, we are still in early development, so I only need to provision two Heroku Resources.</p>
<ol>
  <li>A Heroku App configured to use Eco Dynamos</li>
  <li>An attached PostgreSQL “mini-tier” database to store all application data.</li>
</ol>

<p>So we can begin to provision the apps.</p>

<p>First we define a new resource of type “heroku_app” and we name it “Dendrobium-Core”. This name is not the Heroku app name, but rather the name we will use within this Terraform document to refer back to this resource.</p>

<p>We must assign the app name and desired region through a series of key value pairs inside of the “Dendrobium-Core” block.</p>

<p>For me, that looked something like this:</p>

<p>In <code class="language-plaintext highlighter-rouge">main.tf</code> :</p>
<pre><code class="language-HCL">  # Provision the Core Heroku App "Dendrobium-Core"
  resource "heroku_app" "Dendrobium-Core" {
      name = "dendro"
      region = "us"
  }
</code></pre>

<p>Now would be a good time to check syntax. Luckily Terraform has tf file syntax checker.</p>

<p>First I run</p>

<p><code class="language-plaintext highlighter-rouge">terraform init</code></p>

<p>to setup Terraform based on my <code class="language-plaintext highlighter-rouge">main.tf</code>` file. Now I should be able to execute other Terraform commands including:</p>

<p><code class="language-plaintext highlighter-rouge">terraform validate</code></p>

<p>which, if everything was done correctly, should return:</p>

<p><code class="language-plaintext highlighter-rouge">Success! The configuration is valid.</code></p>

<p>I am not done yet. I still need to attach a database, but if it is anything like provisioning an app, It should be no problem.</p>

<p>In summary, it both is an isn’t. First, we can go over what is the same.</p>

<ol>
  <li>
    <p>You create a database resource, this is the same as before except instead of an “heroku_app”, it is a “heroku_addon” with the name “database”</p>

    <p><code class="language-plaintext highlighter-rouge">resource "heroku_addon" "database" {...}</code></p>
  </li>
  <li>
    <p>I need to Select my database plan, in this case <code class="language-plaintext highlighter-rouge">postgresql:mini</code></p>

    <pre><code class="language-HCL">   resource "heroku_addon" "database" {
     &lt;...&gt;
     plan   = "heroku-postgresql:mini"
   }
</code></pre>
  </li>
</ol>

<p>So far so good. This has been very similar in concept to provisioning a Heroku-App, and ultimately been quite easy. There is one slight twist however. One quirk about Heroku is that databases are provisioned as “add-ons” to an existing app. This means, I need to somehow tell Terraform which Heroku app to attach the database to.</p>

<p>At first I thought maybe there was some way to use the app name, but Terraform was fairly adamant that I should be using an <code class="language-plaintext highlighter-rouge">app_id</code> value instead. Only one problem. I don’t have an app_id. Those are assigned by Heroku after the app is provisioned, and obviously I haven’t done that yet as I am using Terraform to provision resources right now.</p>

<p>I considered some naive approaches (ie. What if I create the app, check the portal for the app_id, then hardcode it into Terraform?) but they weren’t satisfying, and many would defeat the purpose of Terraform altogether (ie. If I need to redeploy, then I will need to manually update the hardcoded value.)</p>

<p>Thats when I discovered that Terraform lets you dynamically access values (like app_ids) from other resources. You see, I erroneously believed that Terraform wouldn’t have access to the app_id, as it is assigned upon provisioning, but that is not entirely true. When you run Terraform, Terraform creates a terraform.tfstate file. This file contains a ton of information about a resource after it is provisioned. I am talking about Heroku assigned hostnames, connected github accounts, organizations, stacks, web urls, even secrets required to deploy successfully, and yes this includes app_ids.</p>

<p>We can access this information with for our Dendrobium-Core Heroku app with the code snippet <code class="language-plaintext highlighter-rouge">heroku_app.Dendrobium-Core.id</code></p>

<p>which we can add to our <code class="language-plaintext highlighter-rouge">main.tf</code> file’s heroku_addon configuration block to get:</p>

<pre><code class="language-HCL">  # Create a database, and configure the app to use it
  resource "heroku_addon" "database" {
    app_id = heroku_app.Dendrobium-Core.id
    plan   = "heroku-postgresql:mini"
  }
</code></pre>

<p>With both resources defined, we can now run</p>

<p><code class="language-plaintext highlighter-rouge">terraform validate</code> to verify that our syntax is correct</p>

<p><code class="language-plaintext highlighter-rouge">terraform plan</code> to double check what Terraform is going to do to provision the resources we defined.</p>

<p>and if everything looks good we can finally run</p>

<p><code class="language-plaintext highlighter-rouge">terraform apply</code></p>

<p>To automatically provision all the infrastructure we need for our app.</p>

<p>Now the Dendrobium Project infrastructure is managed by Terraform!</p>

<h2 id="tldr">TLDR</h2>
<h1 id="here-is-the-configuration-file-i-finally-landed-on">Here is the configuration file I finally landed on:</h1>
<p><code class="language-plaintext highlighter-rouge">main.tf</code>:</p>

<pre><code class="language-HCL"># Heroku Boilerplate
terraform {
  required_providers {
    heroku = {
      source  = "heroku/heroku"
      version = "~&gt; 5.0"
    }
  }
}

# Provision the Core Heroku App "Dendrobium-Core"
resource "heroku_app" "Dendrobium-Core" {
    name = "dendro" # The name Heroku will use for the App Resource
    region = "us" # The Region I want this App hosted in
}

# Create a database, and configure the app to use it
resource "heroku_addon" "database" {
  app_id = heroku_app.Dendrobium-Core.id
  plan   = "heroku-postgresql:mini"
}

</code></pre>

<h1 id="commands">Commands:</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  terraform validate
  terraform plan
  terraform apply
</code></pre></div></div>]]></content><author><name>oliver_puffer</name></author><category term="Devlogs" /><category term="Terraform" /><category term="Dendrobium" /><category term="Devlog" /><category term="Django" /><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Introducing Dendrobium!</title><link href="puffer.cafe%22/devlogs/2023/10/11/introducing-dendrobium.html" rel="alternate" type="text/html" title="Introducing Dendrobium!" /><published>2023-10-11T09:15:24+00:00</published><updated>2023-10-11T09:15:24+00:00</updated><id>puffer.cafe%22/devlogs/2023/10/11/introducing-dendrobium</id><content type="html" xml:base="puffer.cafe%22/devlogs/2023/10/11/introducing-dendrobium.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<h1 id="for-those-of-you-who-dont-know-me-i-am-a-fairly-avid-gardener">For those of you who don’t know me, I am a fairly avid gardener.</h1>

<p>I collect rare and unique plants (sustainably sourced, of course) for an indoor plant collection that I have been contributing to and maintaining since my time in college. Recently, my partner has begun attending medical school at  <a href="https://health.ucdavis.edu/medical-school/">The University of California Davis School of Medicine</a> in Sacramento, CA. There is far more outdoor space here in Sacramento, as opposed to in our tiny apartment in the Bay Area, which means I have been able to expand my plant collection to include a variety of northern california native plants as well.</p>

<p>We also had a neighbor, upon hearing that we were moving, very generously offer us a variety of cuttings and house plants as well, to kickstart my expanded collection.</p>

<p>As a result, my collection of plants has rapidly expanded to fill the newly available space, and for the first time I have begun to encountered difficulty keeping track of the requirements and watering schedules for each of them.</p>

<p>Annnd then I got fungus gnats from a plant I bought online. And then the fungus gnats went for the cuttings I was attempting to propagate.</p>

<p>With the new location, the new watering and light requirements, and the pests, my system for maintaining my collection began to break down. I needed to apply pest treatments 1 once a week, reacclimate all my plants to the new weather, water once every 7-10 days, re-pot plants that were overdue, fertilize plants, put shade cloth over plants that were getting sunburned, and generally manage a lot of added complexity.</p>

<p>So being who I am, I began to search for technology that could assist me in maintaining my plant collection. Not just for watering, but also in regards to maintenance, pruning, weatherproofing, and <a href="https://www.amazon.com/Bonide-BND022-Pesticide-Organic-Gardening/dp/B007CRG4CW/ref=asc_df_B007CRG4CW/?tag=hyprod-20&amp;linkCode=df0&amp;hvadid=416810682178&amp;hvpos=&amp;hvnetw=g&amp;hvrand=5982816398489676476&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9032529&amp;hvtargid=pla-902339632319&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=99569067251&amp;hvpone=&amp;hvptwo=&amp;hvadid=416810682178&amp;hvpos=&amp;hvnetw=g&amp;hvrand=5982816398489676476&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9032529&amp;hvtargid=pla-902339632319">neem-oil</a>/<a href="https://www.amazon.com/Bonide-Copper-Fungicide-Rtu-Natural/dp/B000UJVDXY/ref=sr_1_4?crid=3RO7F3I1YZIL3&amp;keywords=copper+fungicide+spray&amp;qid=1697046944&amp;s=lawn-garden&amp;sprefix=copper+fu%2Clawngarden%2C144&amp;sr=1-4">fungicide</a>/<a href="https://www.amazon.com/NaturesGoodGuys-Live-Beneficial-Nematodes-Million_Nematodes/dp/B07DQT735W/ref=sr_1_5?crid=L2SSGZ3LDEZQ&amp;keywords=beneficial+nematodes&amp;qid=1697046964&amp;s=lawn-garden&amp;sprefix=benef%2Clawngarden%2C140&amp;sr=1-5">beneficial-nematode</a> application.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>Unfortunately, the apps currently on the market left a lot to be desired, they were either too rigid (you must water once a week on the dot), too feature limited (no support for fertilizer/pesticide application), or really expensive (\$8-\$20 a month). <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<p>Which is why, I am going to build one. I have named this project <a href="https://dendrobium.io">Dendrobium</a>.</p>

<h2 id="whats-in-a-name">What’s in a Name?</h2>

<h1 id="i-wanted-to-pick-a-good-name-for-this-project">I wanted to pick a good name for this project.</h1>

<p>Which is easier said than done, it takes seconds to register a domain name, which means most of the good ones were taken hundreds of millions of seconds ago. After several days of trying different combinations, I  settled on <a href="https://dendrobium.io">Dendrobium</a> for a number of reasons.</p>

<ol>
  <li>The word Dendrobium refers to a genus of epiphytic<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> (and occasionally lithophytic<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>) Orchids</li>
  <li>People often struggle to care for orchids, in large part because the way they are presented for sale often contradicts their needs. This is an issue my app will seek to mitigate.
    <ul>
      <li>Orchids are often presented like any other plant, in a pot, with their roots covered in growth media.</li>
      <li>Orchids are Epiphytic, which means instead of from potting mixes, they want to receive their water an nutrients in the form of humidity and moisture collecting on the side of a tree</li>
      <li>The most natural way to grow orchids is mounted on a piece of wood in high humidity environment such that the roots dry quickly after getting wet. While potted orchids can be grown with success, it requires very different, well draining “soil”.</li>
    </ul>
  </li>
  <li>Dendrobium includes the greek root word “Dendron” meaning tree/plant and “Bios” meaning life. While this is in reference to how they grow in the wild. These concepts are also relevant to the project.</li>
  <li><a href="https://dendrobium.io">Dendrobium.io</a> was an unclaimed domain</li>
</ol>

<h2 id="first-steps">First Steps</h2>

<h1 id="i-already-a-splash-page-successfully-hosted-at-dendrobiumio-including-a-nonfunctional-preview-of-what-the-site-layout-might-look-like">I already a splash page successfully hosted at <a href="https://dendrobium.io">Dendrobium.io</a> including a nonfunctional preview of what the site layout might look like.</h1>

<p>I am not 100% satisfied with how it looks, but I think it is good enough for now. Currently it is a static site hosted with github pages, but this app will need a functioning backend in order to deliver the experience I am targeting. I have decided to develop the core application with the Django framework, because of its versatility, built in admin panel, security focus, and support of Python programming language. With this decision out of the way, it is time to setup our development environment and pipeline.</p>

<p>The steps are:</p>
<ol>
  <li>Create Dev Environment</li>
  <li>Implement boilerplate and serve a splash page to verify functionality.</li>
  <li>Select and Setup Database (PostgreSQL is my favorite, but is it the best match for this application?)</li>
  <li>Determine Where and How to Deploy (I will probably start with Heroku because I already have underutilized eco dynamos provisioned for other projects)</li>
  <li>Setup Continuous Integration Automated Testing with Github Actions</li>
  <li>Setup Terraform (Probably Overkill for now, but if I start defining infrastructure from the start, it will greatly help with scaling if I decide to add a CDN, Multiple DBs, or more microservices)</li>
  <li>Setup Continuous Deployment to Heroku Test Branch</li>
</ol>

<p>Once I get all this out of the way, I can begin to implement features. I will begin with the basics; Exposing DB actions through a REST API, handling User Authentication, deciding how to define the relationship between different models, allowing users to add/edit/remove plants from their “garden” and input care notes. Once all of this is in place, I can setup the backend to process these notes and develop a care schedule.</p>

<p>For now though, it is the boilerplate. Stay tuned for updates!</p>

<h1 id="footnotes">Footnotes:</h1>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>By the way, Beneficial Nematodes were actually super effective at solving the fungus gnat issue. 10/10 would recommend <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Don’t worry, my plants all turned out ok. There is one Rhaphidophora tetrasperma that was already unhealthy that I am propagating because it did not move well, but otherwise all plants are doing much better now, and my uncommon propagations have been successfully transferred to soil. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Epiphyte - A plant that grows off of another plant, as opposed to in soil. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>lithophyte - A plant that grows on rock faces <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>oliver_puffer</name></author><category term="Devlogs" /><category term="Dendrobium" /><category term="Devlog" /><category term="Django" /><summary type="html"><![CDATA[Introduction For those of you who don’t know me, I am a fairly avid gardener. I collect rare and unique plants (sustainably sourced, of course) for an indoor plant collection that I have been contributing to and maintaining since my time in college. Recently, my partner has begun attending medical school at The University of California Davis School of Medicine in Sacramento, CA. There is far more outdoor space here in Sacramento, as opposed to in our tiny apartment in the Bay Area, which means I have been able to expand my plant collection to include a variety of northern california native plants as well. We also had a neighbor, upon hearing that we were moving, very generously offer us a variety of cuttings and house plants as well, to kickstart my expanded collection. As a result, my collection of plants has rapidly expanded to fill the newly available space, and for the first time I have begun to encountered difficulty keeping track of the requirements and watering schedules for each of them. Annnd then I got fungus gnats from a plant I bought online. And then the fungus gnats went for the cuttings I was attempting to propagate. With the new location, the new watering and light requirements, and the pests, my system for maintaining my collection began to break down. I needed to apply pest treatments 1 once a week, reacclimate all my plants to the new weather, water once every 7-10 days, re-pot plants that were overdue, fertilize plants, put shade cloth over plants that were getting sunburned, and generally manage a lot of added complexity. So being who I am, I began to search for technology that could assist me in maintaining my plant collection. Not just for watering, but also in regards to maintenance, pruning, weatherproofing, and neem-oil/fungicide/beneficial-nematode application.1 Unfortunately, the apps currently on the market left a lot to be desired, they were either too rigid (you must water once a week on the dot), too feature limited (no support for fertilizer/pesticide application), or really expensive (\$8-\$20 a month). 2 Which is why, I am going to build one. I have named this project Dendrobium. What’s in a Name? I wanted to pick a good name for this project. Which is easier said than done, it takes seconds to register a domain name, which means most of the good ones were taken hundreds of millions of seconds ago. After several days of trying different combinations, I settled on Dendrobium for a number of reasons. The word Dendrobium refers to a genus of epiphytic3 (and occasionally lithophytic4) Orchids People often struggle to care for orchids, in large part because the way they are presented for sale often contradicts their needs. This is an issue my app will seek to mitigate. Orchids are often presented like any other plant, in a pot, with their roots covered in growth media. Orchids are Epiphytic, which means instead of from potting mixes, they want to receive their water an nutrients in the form of humidity and moisture collecting on the side of a tree The most natural way to grow orchids is mounted on a piece of wood in high humidity environment such that the roots dry quickly after getting wet. While potted orchids can be grown with success, it requires very different, well draining “soil”. Dendrobium includes the greek root word “Dendron” meaning tree/plant and “Bios” meaning life. While this is in reference to how they grow in the wild. These concepts are also relevant to the project. Dendrobium.io was an unclaimed domain First Steps I already a splash page successfully hosted at Dendrobium.io including a nonfunctional preview of what the site layout might look like. I am not 100% satisfied with how it looks, but I think it is good enough for now. Currently it is a static site hosted with github pages, but this app will need a functioning backend in order to deliver the experience I am targeting. I have decided to develop the core application with the Django framework, because of its versatility, built in admin panel, security focus, and support of Python programming language. With this decision out of the way, it is time to setup our development environment and pipeline. The steps are: Create Dev Environment Implement boilerplate and serve a splash page to verify functionality. Select and Setup Database (PostgreSQL is my favorite, but is it the best match for this application?) Determine Where and How to Deploy (I will probably start with Heroku because I already have underutilized eco dynamos provisioned for other projects) Setup Continuous Integration Automated Testing with Github Actions Setup Terraform (Probably Overkill for now, but if I start defining infrastructure from the start, it will greatly help with scaling if I decide to add a CDN, Multiple DBs, or more microservices) Setup Continuous Deployment to Heroku Test Branch Once I get all this out of the way, I can begin to implement features. I will begin with the basics; Exposing DB actions through a REST API, handling User Authentication, deciding how to define the relationship between different models, allowing users to add/edit/remove plants from their “garden” and input care notes. Once all of this is in place, I can setup the backend to process these notes and develop a care schedule. For now though, it is the boilerplate. Stay tuned for updates! Footnotes: By the way, Beneficial Nematodes were actually super effective at solving the fungus gnat issue. 10/10 would recommend &#8617; Don’t worry, my plants all turned out ok. There is one Rhaphidophora tetrasperma that was already unhealthy that I am propagating because it did not move well, but otherwise all plants are doing much better now, and my uncommon propagations have been successfully transferred to soil. &#8617; Epiphyte - A plant that grows off of another plant, as opposed to in soil. &#8617; lithophyte - A plant that grows on rock faces &#8617;]]></summary></entry><entry><title type="html">Welcome to the Cafe!</title><link href="puffer.cafe%22/coffee-chat/2023/10/10/welcome-to-the-cafe.html" rel="alternate" type="text/html" title="Welcome to the Cafe!" /><published>2023-10-10T09:15:24+00:00</published><updated>2023-10-10T09:15:24+00:00</updated><id>puffer.cafe%22/coffee-chat/2023/10/10/welcome-to-the-cafe</id><content type="html" xml:base="puffer.cafe%22/coffee-chat/2023/10/10/welcome-to-the-cafe.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<h1 id="hello-my-name-is-oliver">Hello! My Name is Oliver</h1>

<p>I created this site as a way to learn Jekyll, and to talk about tech projects that interest me. As I become more aquainted with Jekyll, I will begin modifying page layouts, or even create an entire custom theme from scratch, but for now I am using the <a href="https://github.com/jeffreytse/jekyll-theme-yat">Yet-Another-Jekyll-Theme</a> generously provided for free on github by <a href="https://github.com/jeffreytse">jeffreytse</a>.</p>

<p>This is also something of an expiriment. If managing a Jekyll site is easy enough, I might be able to support my activist friends by teaching them how to use jekyll + Github Pages to distribute information.</p>

<p>So far, setting up Jekyll has proven more difficult than I initially expected. Until now, I had not had the displeasure of trying to install Ruby on MacOs. For now, I have taken to using git-bash on Windows, but I will work to get setup with Ruby on MacOS and in WSL.</p>

<p>For now, Welcome to Puffer Cafe!</p>]]></content><author><name>oliver_puffer</name></author><category term="Coffee-Chat" /><category term="Introduction" /><category term="Jekyll" /><category term="Ruby" /><summary type="html"><![CDATA[Introduction Hello! My Name is Oliver I created this site as a way to learn Jekyll, and to talk about tech projects that interest me. As I become more aquainted with Jekyll, I will begin modifying page layouts, or even create an entire custom theme from scratch, but for now I am using the Yet-Another-Jekyll-Theme generously provided for free on github by jeffreytse. This is also something of an expiriment. If managing a Jekyll site is easy enough, I might be able to support my activist friends by teaching them how to use jekyll + Github Pages to distribute information. So far, setting up Jekyll has proven more difficult than I initially expected. Until now, I had not had the displeasure of trying to install Ruby on MacOs. For now, I have taken to using git-bash on Windows, but I will work to get setup with Ruby on MacOS and in WSL. For now, Welcome to Puffer Cafe!]]></summary></entry></feed>